

I needed to clean the data in excel a little bit- changing the date format and adding a new column that could be used as the primary key to get the data into mySQL server. I also spent about 10 hours figuring out how to get into the inner files of MySQL and rewrite the settings so I could quickly upload data, because the way I have been using would have taken me about 3 days just to upload.
—----------------------------------------------------------------------------------------------

Initializing in the command Client: 

USE sales;

mysql> CREATE TABLE sales2(  Store int,  dept int,  Date datetime,  Weekly_Sales double,  IsHoliday varchar(45),  entry int NOT NULL,  PRIMARY KEY (entry) );
Query OK, 0 rows affected (0.02 sec)

mysql> LOAD DATA LOCAL INFILE "C:/Users/kanel/Documents/salesdata/sales.csv"INTO TABLE `sales2`FIELDS TERMINATED BY ',' ENCLOSED BY '"' LINES TERMINATED BY '\r\n' IGNORE 1 LINES;
Query OK, 421570 rows affected (5.20 sec)
Records: 421570  Deleted: 0  Skipped: 0  Warnings: 0

Edit:
ALTER TABLE `sales`.`sales1` 
RENAME TO  `sales`.`sales` ;
—-------------------------------------------------------------------------------------------------

What date range are we dealing with in these spreadsheets?

SELECT MIN(Date), MAX(Date)
FROM `sales`
2010-02-05- 2012-10-26

FROM `features`
2010-02-05-  2013-04-26 

So, they are not the same date range. 

A question that I have about the data is what do the A, B, and C store types mean? This is a potential answer, but it is not straightforward: https://www.yourarticlelibrary.com/retailing/retailing-in-india/retail-store-classification-2-categories-retailing/87239 

There are indeed only the three types: 
SELECT COUNT(DISTINCT Type)
FROM `stores`

Let’s see if there is a difference in sales between these three store types.  
WITH new AS
(SELECT b.Store, a.Type, a.Size, b.Weekly_Sales
FROM `sales` as b
JOIN `stores` as a
ON a.Store = b.Store)
SELECT Type, AVG(size), AVG(Weekly_Sales)
FROM `new`
GROUP BY Type
Type	AVG(size)	AVG(Weekly_Sales)
A	182231.2855	20099.568042909486
B	101818.7358	12237.07597675813
C	40535.7253	9519.532538441641

Not a huge difference. 


Let’s look at how much each of these stores are selling in a year: 
SELECT Store, SUM(Weekly_Sales) as annual_sales
FROM `sales`
WHERE Date BETWEEN '2010-02-05' AND '2011-02-05'
GROUP BY Store

# Store	 annual_sales
14	114378883.5
20	111354912.09000012
4	105228170.3699999
2	104156211.37000015
13	103951623.22
10	103258686.83999999
27	97679886.91000018
6	83632243.97000003
1	80365512.55000001
19	78853624.59999987
23	73201698.09000008
24	72696303.9199999
31	72265319.20999976
39	71945793.94999985
11	71339234.38000014
28	71052380.13000016
41	63238312.56999987
18	60486083.519999884
32	60421180.92000011
35	55573700.360000215
22	55147201.78000015
12	52813798.63000003
26	52680295.65000002
34	50649350.070000075
40	50467142.16000005
8	47436706.40000007
17	45255245.04999991
45	41891551.909999944
21	40821087.719999984
25	38075795.90999999
43	34578827.500000045
15	34537574.76000005
29	29189372.940000113
7	28369566.389999986
42	28324319.380000032
9	27540483.68000007
37	27200545.140000068
16	27163087.40999999
30	24011665.17000001
36	23137170.14000003
3	20658980.91000001
38	18431274.850000005
5	16267029.669999996
44	15034821.470000016
33	13980541.19999999



So we know our top performers and worst performers in this date range. 

Who is our best performing store (all time)?
SELECT Store, SUM(Weekly_Sales) as total_sales
FROM `sales`
GROUP BY Store
ORDER BY total_sales DESC
LIMIT 1
# Store	total_sales
20	301397792.45999974

Who is the worst?
# Store	total_sales
33	37160221.96


How does each department do in the best performing store?
SELECT Store, dept, SUM(Weekly_Sales) as total_sales
FROM `sales`
WHERE Store = '20'
GROUP BY dept
ORDER BY total_sales ASC

# Store	dept	total_sales
20	47	-378.58
20	78	29
20	51	161.18
20	96	244.26999999999998
20	45	666.1800000000005
20	77	3150.74
20	19	13621.350000000006
20	54	31289.79999999997
20	99	35030.770000000004
20	60	83894.3
20	28	136520.89
20	48	194518.71
20	59	240390.91999999998
20	27	387628.6799999999
20	52	466761.31
20	50	472077.3499999996
20	36	485278.0100000002
20	31	549256.73
20	37	572913.5000000002
20	58	594281.59
20	85	714110.0100000001
20	56	771711.24
20	83	804367.7700000003
20	35	834348.7900000003
20	41	883338.9399999998
20	30	900738.1699999998
20	20	999984.6600000001
20	12	1113538.1199999999
20	44	1144458.6800000004
20	6	1174136.6400000001
20	24	1188317.8200000005
20	71	1203350.0599999987
20	29	1279381.0700000005
20	42	1282819.72
20	33	1356484.6099999999
20	18	1646262
20	26	1830990.9600000011
20	21	1924431.7800000007
20	32	1963129.7899999989
20	22	1992255.2899999989
20	3	2215208.889999999
20	67	2493569.3100000005
20	25	2504731.569999999
20	17	2640409.750000001
20	98	2757665.9600000004
20	55	2833685.59
20	49	3060554.2499999995
20	34	3161299.0700000017
20	74	3187344.6000000006
20	14	3471430.3300000005
20	97	3694556.9000000004
20	11	3707337.0500000003
20	16	3867865.269999999
20	82	4350270.76
20	81	4713078.800000002
20	46	4802497.500000001
20	23	5384687.640000004
20	9	5468838.219999998
20	79	5519408.070000002
20	80	5701519.739999997
20	1	5798002.669999999
20	5	5955633.47
20	10	5981184.860000004
20	87	6335146.569999998
20	7	7063441.990000002
20	4	7358261.859999999
20	93	7553057.469999998
20	13	8091012.109999998
20	94	9030211.9
20	8	10931643.760000004
20	2	11189928.739999995
20	91	11224526.190000003
20	40	12372193.759999998
20	72	13154550.44
20	90	13707777.99
20	38	15759345.930000003
20	95	21537795.619999994
20	92	23542625.040000014

It seems like there is a department that loses money- perhaps this is returns? This is pretty low for returns however. There is also some departments that are scoring pretty low. I would want to ask more questions about what might be going on with these departments. 

Let’s see how our most poorly performing store is doing:
# Store	dept	total_sales
33	99	0.11
33	27	1
33	71	5
33	34	21.759999999999998
33	49	40
33	72	62.72
33	44	71.51000000000002
33	35	95
33	23	112.19999999999999
33	36	180
33	6	311.90999999999985
33	33	403.8300000000001
33	24	575.2200000000004
33	32	950.3
33	31	1322.3000000000002
33	52	1497.4300000000007
33	56	1604.2400000000002
33	59	2131.379999999999
33	22	2425.2200000000007
33	41	2668.5
33	12	2758.07
33	25	3324.8600000000006
33	55	3997.000000000001
33	9	4920.660000000001
33	42	7247.79
33	20	7289.990000000006
33	10	11483.069999999998
33	60	15339.000000000004
33	5	16007.420000000002
33	26	19296.399999999983
33	11	24326.080000000005
33	18	25025.3
33	21	28720.880000000005
33	3	40604.869999999995
33	17	42475.459999999985
33	16	46278.85999999999
33	87	47278.07000000003
33	74	51952.159999999996
33	7	56186.53999999998
33	67	92292.97999999998
33	14	145698.06000000008
33	46	279348.47
33	1	340209.3799999999
33	83	366927.0000000001
33	82	448176.73
33	8	526210.2799999998
33	97	768735.0400000004
33	4	873389.0899999999
33	40	892776.7300000004
33	13	991231.17
33	98	1049718.9799999995
33	2	1068413.7899999998
33	80	1185911.4299999997
33	81	1274654.2500000002
33	96	1340170.570000001
33	91	1410389.39
33	79	1566208.6600000001
33	38	1936194.2600000007
33	90	3560689.010000001
33	93	3667671.759999999
33	95	3864281.7300000014
33	94	4147375.299999999
33	92	4894555.790000003

Again, I have questions about some of these lowest selling departments. 


Let’s see how different variables impact sales in our stores:
Holidays:

SELECT Store, AVG(Weekly_Sales) as average_sales, IsHoliday
FROM `sales`
GROUP BY Store, IsHoliday
ORDER BY Store

# Store 	average_sales	 IsHoliday
1	21609.63473269609	FALSE
1	23039.38666666666	TRUE
2	26753.86422656585	FALSE
2	28798.71052631582	TRUE
3	6332.098604069957	FALSE
3	6916.446287519747	TRUE
4	29032.260569931776	FALSE
4	30854.231416781327	TRUE
5	5010.249172149815	FALSE
5	5617.212609375002	TRUE
6	21806.854728134887	FALSE
6	23313.56348127601	TRUE
7	8254.246774335796	FALSE
7	9730.82872648337	TRUE
8	13066.406406131076	FALSE
8	14013.374425287358	TRUE
9	8723.575683086608	FALSE
9	9423.21313599999	TRUE
10	26116.166656240195	FALSE
10	29195.52415745853	TRUE
11	19185.33853019775	FALSE
11	20486.48493635078	TRUE
12	14731.30413988021	FALSE
12	16663.842166910705	TRUE
13	27261.146968669662	FALSE
13	28593.285602165095	TRUE
14	28680.955484631035	FALSE
14	30164.765263157922	TRUE
15	8920.611276086973	FALSE
15	10077.118659058484	TRUE
16	7820.420631698977	FALSE
16	8421.005141158985	TRUE
17	12862.113716341417	FALSE
17	14179.406237337205	TRUE
18	15641.892529174444	FALSE
18	16948.14726086956	TRUE
19	20233.689680907395	FALSE
19	22056.597678321672	TRUE
20	29386.517927510282	FALSE
20	31106.985905947455	TRUE
21	11204.327404622987	FALSE
21	12335.691179104468	TRUE
22	15122.879885657176	FALSE
22	15954.039058823522	TRUE
23	19700.962434196423	FALSE
23	20774.74849431819	TRUE
24	18856.11010518568	FALSE
24	20459.06034674064	TRUE
25	10278.109376714616	FALSE
25	10704.44054992764	TRUE
26	14491.200753521902	FALSE
26	15380.873012912507	TRUE
27	24714.172533136967	FALSE
27	26318.487872044512	TRUE
28	18567.759341279118	FALSE
28	20645.87437150839	TRUE
29	8088.309482189602	FALSE
29	9086.19594311378	TRUE
30	8763.636534995503	FALSE
30	8772.275240963852	TRUE
31	19585.576617865463	FALSE
31	20950.084217877098	TRUE
32	16318.545633104888	FALSE
32	16789.178284518817	TRUE
33	5723.280870069603	FALSE
33	5796.788498896248	TRUE
34	13443.052067514976	FALSE
34	14573.120125874118	TRUE
35	13631.73673927765	FALSE
35	16083.060733532926	TRUE
36	8597.374013828869	FALSE
36	8412.829061784896	TRUE
37	10306.767529446846	FALSE
37	10170.84268537074	TRUE
38	7493.363636894339	FALSE
38	7480.5858431372535	TRUE
39	20905.594997277025	FALSE
39	22254.33974175037	TRUE
40	13730.522084452521	FALSE
40	14197.663028169021	TRUE
41	17915.3733955424	FALSE
41	18775.63791842477	TRUE
42	11425.51582650381	FALSE
42	11680.949753086421	TRUE
43	13410.729834368569	FALSE
43	13473.438093220333	TRUE
44	6046.886331334315	FALSE
44	5932.5771743486985	TRUE
45	11614.648240482253	FALSE
45	12298.436955882367	TRUE




Let’s look at temperature and sales for just store 33 (Top seller):

WITH temp_33 AS
(SELECT Store, Date, 
CASE WHEN Temperature <30 THEN 'cold'
	WHEN Temperature >=30 AND Temperature <80 THEN 'normal'
	ELSE 'hot'
    END AS temp_cat
FROM `features`
WHERE Store = '33' AND Date < '2012-10-26'
ORDER BY date asc),
store_33 AS
(SELECT Store, Date, SUM(Weekly_Sales) as sales
FROM `sales`
WHERE Store = '33'
GROUP BY Date)
SELECT a.store, a.Date, a.temp_cat, b.sales
FROM `temp_33` as a
JOIN store_33 as b
ON a.Date=b.Date
ORDER BY a.Date ASC, b.sales DESC








